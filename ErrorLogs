1. Reactor would not work with OP.Accept
Cause: SelectionKey is a non blocking IO, but I had set the mode to BLOCKING = TRUE.
Solution: Make it a non blocking

2. Splitting bytes in high and low bytes for block number in data packet

3. It might be better to work chronologically on how the system works because adding features you think you need will not always be true

4. look into handler. sending multiple packets back to client issue
        // 0 vs 1? causing issue.
           sk = socket.register(sel, SelectionKey.OP_READ);

5. if packet size is not max,
              while (dataBuffer.position() < MAX_PACKET_SIZE) {
                    clientChannel.read(dataBuffer);
                }

6. If you have a hard time finding a bug and it's taking you the entire day to get past it, redo everything.
As in, remove all your previous test cases and redo it step by step to see if you messed something up along the way.


7. you need bytesread -> tells the socket to read data

 ByteBuffer ackBuffer = ByteBuffer.allocate(4);
   int bytesRead = socket.read(ackBuffer);
   if (bytesRead < 4) {
       System.out.println("ACK packet incomplete, waiting for more data");
       return;
   }
   ackBuffer.flip();
   byte[] receivedAck = new byte[4];
   ackBuffer.get(receivedAck);

8. There might be leftover data in the buffer that's preventing me from sending multiple images in the reactor setup.
( In Sequential, it only read up to 117 out of 120 acks leaving excess acks that have left to be read )
If I fix this, reactive programming might work.

Possible Causes of Bug:
1. Data Packet: [I used the code 7 to display the upcoming ending packet, but it seemed to have replaced the final two packet as the same as window.size - 2 as well]
Note: Fixing this in sequential didn't fix the bug, so there's more to it

Solution: Moving when I entered the terminating phase

9. Rather than working on perfecting one item at a time, it might be better to make sure that the one item works flawlessly through all possible inputs.
a. for window size, there seems to be an error with

Architect:
1. Start Reactor
2. Reactor waits for client message
3. Send message through Client
4. Once message is received, dispatch to create the handler
5.


Resources:
https://stackoverflow.com/questions/905781/how-to-read-and-write-data-and-accepting-connection-using-socket-channel
https://datatracker.ietf.org/doc/html/rfc1350
https://docs.oracle.com/javase/tutorial/2d/images/saveimage.html